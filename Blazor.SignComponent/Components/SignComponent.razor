@inject IJSRuntime JS
@rendermode InteractiveServer
<div>
    <canvas id="signCanvas" width="@Width" height="@Height" style="border: 1px solid black; background: white">

    </canvas>
    <button @onclick="ClearSign">지우기</button>
    <button @onclick="DownloadToImage">저장</button>
</div>

@code {
    [Parameter]
    public int Width { get; set; }
    [Parameter]
    public int Height { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await JS.InvokeVoidAsync("signCanvas.init", "signCanvas");
    }

    public async Task ClearSign() {
        await JS.InvokeVoidAsync("signCanvas.clear");
    }

    public async Task DownloadToImage() {
        await JS.InvokeVoidAsync("signCanvas.download");
    }
}

<script>
    window.signCanvas = {
        lastX: 0,
        lastY: 0,
        isDrawing: false,
        canvas: null,
        context: null,
        init: function (canvasId) {
            var _canvas = document.getElementById(canvasId);

            if (_canvas.getContext) {
                canvas = _canvas;
                context = canvas.getContext('2d');
            }

            context.fillStyle = 'white';
            context.fillRect(0, 0, canvas.width, canvas.height);

            canvas.addEventListener("mousedown", function (event) {
                this.isDrawing = true;
                [this.lastX, this.lastY] = [event.offsetX, event.offsetY];
            });

            canvas.addEventListener('mousemove', function (event) {
                if (!this.isDrawing) return;

                context.beginPath();
                context.moveTo(this.lastX, this.lastY);
                context.lineTo(event.offsetX, event.offsetY);
                context.stroke();

                [this.lastX, this.lastY] = [event.offsetX, event.offsetY];
            });

            canvas.addEventListener('mouseup', function () {
                this.isDrawing = false;
            });

            canvas.addEventListener('mouseout', function () {
                this.isDrawing = false;
            });


            //터치 (패드나 핸드폰일 경우)
            canvas.addEventListener('touchstart', function (event) {
                isDrawing = true;

                var touch = event.touches[0]; // 첫 번째 터치 이벤트만 사용

                // 뷰포트 크기와 캔버스의 실제 픽셀 크기 비율 계산
                var scale = canvas.width / canvas.offsetWidth;

                // 터치한 좌표를 캔버스 좌표로 변환
                var rect = canvas.getBoundingClientRect();
                lastX = (touch.clientX - rect.left) * scale;
                lastY = (touch.clientY - rect.top) * scale;
            });
            canvas.addEventListener('touchmove', function (event) {
                if (!isDrawing) return;

                var touch = event.touches[0]; // 첫 번째 터치 이벤트만 사용

                // 뷰포트 크기와 캔버스의 실제 픽셀 크기 비율 계산
                var scale = canvas.width / canvas.offsetWidth;

                // 터치한 좌표를 캔버스 좌표로 변환
                var rect = canvas.getBoundingClientRect();
                var x = (touch.clientX - rect.left) * scale;
                var y = (touch.clientY - rect.top) * scale;

                context.beginPath();
                context.moveTo(lastX, lastY);
                context.lineTo(x, y);
                context.stroke();

                lastX = x;
                lastY = y;
            });
            canvas.addEventListener('touchend', function (event) {
                isDrawing = false;
            });
        },
        download: function () {
            const link = document.createElement('a');
            link.download = 'signImage_' + Date.now() + '.png';
            link.href = canvas.toDataURL('image/png');
            link.click();
        },
        clear: function () {
            context.clearRect(0, 0, canvas.width, canvas.height);
        }
    }
</script>